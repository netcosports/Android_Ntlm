apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'


buildscript {
    repositories {

        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://artifactory-blr.netcodev.com/artifactory/libs-release'
            credentials {
                username repoUsername
                password repoPassword
            }
        }
    }
}

def packageName = 'com.netcosports.ntlm'

android {
    compileSdkVersion 29



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.squareup.okhttp3:okhttp:3.9.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


publishing {
    publications {
        aar(MavenPublication) {
            groupId packageName
            version = "1.0"
            artifactId "nlmn"

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)

                    if (it.moduleName == "simple-xml") {
                        def exclusions = dependency.appendNode('exclusions')
                        def exclusion1 = exclusions.appendNode('exclusion')
                        exclusion1.appendNode("groupId", 'stax')
                        exclusion1.appendNode("artifactId", 'stax')
                        def exclusion2 = exclusions.appendNode('exclusion')
                        exclusion2.appendNode("groupId", 'stax')
                        exclusion2.appendNode("artifactId", 'stax-api')
                        def exclusion3 = exclusions.appendNode('exclusion')
                        exclusion3.appendNode("groupId", 'xpp3')
                        exclusion3.appendNode("artifactId", 'xpp3')
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://artifactory-blr.netcodev.com/artifactory'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = 'libs-release-local'

            username = repoUsername
            password = repoPassword
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
//            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}


